<testng-results>
  <suite name="TestNG JDK 1.5">
    <groups>
      <group name="foo">
        <method signature="test.configuration.MultipleBeforeGroupTest.test()" name="test" class="test.configuration.MultipleBeforeGroupTest"/>
        <method signature="test.configuration.MultipleBeforeGroupTest.verify()" name="verify" class="test.configuration.MultipleBeforeGroupTest"/>
      </group>
      <group name="group1">
        <method signature="test.Exclude.included1()" name="included1" class="test.Exclude"/>
        <method signature="test.Exclude.included2()" name="included2" class="test.Exclude"/>
        <method signature="test.configuration.ConfigurationInheritGroupsSampleTest.test1()" name="test1" class="test.configuration.ConfigurationInheritGroupsSampleTest"/>
      </group>
      <group name="3">
        <method signature="test.dependent.BaseOrderMethodTest.third0()" name="third0" class="test.dependent.BaseOrderMethodTest"/>
      </group>
      <group name="cg5-1">
        <method signature="test.configuration.ConfigurationGroups5SampleTest.run1()" name="run1" class="test.configuration.ConfigurationGroups5SampleTest"/>
      </group>
      <group name="cg34-1">
        <method signature="test.configuration.ConfigurationGroups3SampleTest.f1()" name="f1" class="test.configuration.ConfigurationGroups3SampleTest"/>
      </group>
      <group name="2.1">
        <method signature="test.dependent.OrderMethodTest.a_second1()" name="a_second1" class="test.dependent.OrderMethodTest"/>
      </group>
      <group name="1.0">
        <method signature="test.dependent.OrderMethodTest.z_first0()" name="z_first0" class="test.dependent.OrderMethodTest"/>
      </group>
      <group name="cg1-a">
        <method signature="test.configuration.ConfigurationGroups1SampleTest.fa()" name="fa" class="test.configuration.ConfigurationGroups1SampleTest"/>
      </group>
      <group name="cg34-a">
        <method signature="test.configuration.ConfigurationGroups3SampleTest.fa()" name="fa" class="test.configuration.ConfigurationGroups3SampleTest"/>
      </group>
      <group name="cg2-a">
        <method signature="test.configuration.ConfigurationGroups2SampleTest.fa()" name="fa" class="test.configuration.ConfigurationGroups2SampleTest"/>
      </group>
      <group name="1.1">
        <method signature="test.dependent.OrderMethodTest.z_premiere1()" name="z_premiere1" class="test.dependent.OrderMethodTest"/>
      </group>
      <group name="a">
        <method signature="test.regression.groupsordering.B.testB()" name="testB" class="test.regression.groupsordering.B"/>
        <method signature="test.regression.groupsordering.A.testA()" name="testA" class="test.regression.groupsordering.A"/>
        <method signature="test.groupinvocation.DummyTest.testA()" name="testA" class="test.groupinvocation.DummyTest"/>
        <method signature="test.groupinvocation.DummyTest.testAB()" name="testAB" class="test.groupinvocation.DummyTest"/>
      </group>
      <group name="A">
        <method signature="test.configuration.ConfigurationGroups7SampleTest.testSomething()" name="testSomething" class="test.configuration.ConfigurationGroups7SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups7SampleTest.testSomethingMore()" name="testSomethingMore" class="test.configuration.ConfigurationGroups7SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups8SampleTest.testSomething()" name="testSomething" class="test.configuration.ConfigurationGroups8SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups8SampleTest.testSomethingMore()" name="testSomethingMore" class="test.configuration.ConfigurationGroups8SampleTest"/>
      </group>
      <group name="before">
        <method signature="test.inheritance.DChild_2.test()" name="test" class="test.inheritance.DChild_2"/>
      </group>
      <group name="cg2-1">
        <method signature="test.configuration.ConfigurationGroups2SampleTest.f1()" name="f1" class="test.configuration.ConfigurationGroups2SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups2SampleTest.g1()" name="g1" class="test.configuration.ConfigurationGroups2SampleTest"/>
      </group>
      <group name="basic1">
        <method signature="test.sample.Basic1.basic1()" name="basic1" class="test.sample.Basic1"/>
      </group>
      <group name="currentold">
        <method signature="test.Test1.logger()" name="logger" class="test.Test1"/>
      </group>
      <group name="singleString">
        <method signature="test.parameters.ParameterSample.testSingleString(java.lang.String)" name="testSingleString" class="test.parameters.ParameterSample"/>
      </group>
      <group name="cg5-2">
        <method signature="test.configuration.ConfigurationGroups5SampleTest.run2()" name="run2" class="test.configuration.ConfigurationGroups5SampleTest"/>
      </group>
      <group name="cg4-1">
        <method signature="test.configuration.ConfigurationGroups4SampleTest.run()" name="run" class="test.configuration.ConfigurationGroups4SampleTest"/>
      </group>
      <group name="inheritedTestMethod">
        <method signature="test.sample.BaseSampleInheritance.baseMethod()" name="baseMethod" class="test.sample.BaseSampleInheritance"/>
      </group>
      <group name="one">
        <method signature="test.dependent.SampleDependentMethods2.oneA()" name="oneA" class="test.dependent.SampleDependentMethods2"/>
        <method signature="test.dependent.SampleDependentMethods2.oneB()" name="oneB" class="test.dependent.SampleDependentMethods2"/>
      </group>
      <group name="cg1-1">
        <method signature="test.configuration.ConfigurationGroups1SampleTest.f1()" name="f1" class="test.configuration.ConfigurationGroups1SampleTest"/>
      </group>
      <group name="current">
        <method signature="test.Test1.includedGroups()" name="includedGroups" class="test.Test1"/>
        <method signature="test.mannotation.MAnnotation2SampleTest.verifyTestEnabledInheritance()" name="verifyTestEnabledInheritance" class="test.mannotation.MAnnotation2SampleTest"/>
        <method signature="test.MethodTest.excludeMethodsOnly()" name="excludeMethodsOnly" class="test.MethodTest"/>
        <method signature="test.MethodTest.includeMethodsOnly()" name="includeMethodsOnly" class="test.MethodTest"/>
        <method signature="test.multiple.TestMultiple.multiple()" name="multiple" class="test.multiple.TestMultiple"/>
        <method signature="test.CommandLineTest.suiteNameOverride()" name="suiteNameOverride" class="test.CommandLineTest"/>
        <method signature="test.CommandLineTest.junitParsing2()" name="junitParsing2" class="test.CommandLineTest"/>
        <method signature="test.CommandLineTest.junitParsing()" name="junitParsing" class="test.CommandLineTest"/>
        <method signature="test.CommandLineTest.testNameOverride()" name="testNameOverride" class="test.CommandLineTest"/>
      </group>
      <group name="outer-group">
        <method signature="test.sample.Scope.outerDeprecated(java.lang.String)" name="outerDeprecated" class="test.sample.Scope"/>
      </group>
      <group name="MyTest">
        <method signature="test.factory.MyTest.testMethod()" name="testMethod" class="test.factory.MyTest"/>
      </group>
      <group name="first">
        <method signature="test.classgroup.First.first2()" name="first2" class="test.classgroup.First"/>
        <method signature="test.classgroup.First.first1()" name="first1" class="test.classgroup.First"/>
        <method signature="test.factory.FactoryTest2.testInt()" name="testInt" class="test.factory.FactoryTest2"/>
        <method signature="test.factory.FactoryWithInstanceInfoTest2.testInt()" name="testInt" class="test.factory.FactoryWithInstanceInfoTest2"/>
      </group>
      <group name="inner-group">
        <method signature="test.sample.Scope.innerDeprecated(java.lang.String)" name="innerDeprecated" class="test.sample.Scope"/>
      </group>
      <group name="unittest">
        <method signature="test.nested.GarfTest.testGarf()" name="testGarf" class="test.nested.GarfTest"/>
      </group>
      <group name="B">
        <method signature="test.configuration.ConfigurationGroups8SampleTest.verify()" name="verify" class="test.configuration.ConfigurationGroups8SampleTest"/>
      </group>
      <group name="b">
        <method signature="test.groupinvocation.DummyTest.testAB()" name="testAB" class="test.groupinvocation.DummyTest"/>
      </group>
      <group name="testMethodOnFactoryClass">
        <method signature="test.factory.FactoryInSeparateClass.checkSum()" name="checkSum" class="test.factory.FactoryInSeparateClass"/>
      </group>
      <group name="2.0">
        <method signature="test.dependent.BaseOrderMethodTest.a_second0()" name="a_second0" class="test.dependent.BaseOrderMethodTest"/>
      </group>
      <group name="nopackage">
        <method signature="NoPackageTest.test()" name="test" class="NoPackageTest"/>
      </group>
      <group name="group2">
        <method signature="test.Exclude.verify()" name="verify" class="test.Exclude"/>
      </group>
      <group name="sample1">
        <method signature="test.methods.SampleMethod1.shouldRun2()" name="shouldRun2" class="test.methods.SampleMethod1"/>
        <method signature="test.methods.SampleMethod1.shouldRun1()" name="shouldRun1" class="test.methods.SampleMethod1"/>
      </group>
      <group name="cg6-1">
        <method signature="test.configuration.ConfigurationGroups6SampleTest.run2()" name="run2" class="test.configuration.ConfigurationGroups6SampleTest"/>
        <method signature="test.configuration.ConfigurationGroups6SampleTest.run1()" name="run1" class="test.configuration.ConfigurationGroups6SampleTest"/>
      </group>
    </groups>
    <test name="DataProvider">
      <class name="test.dataprovider.Sample1Test">
        <test-method status="PASS" signature="verifyNames(java.lang.String, java.lang.Integer)" name="verifyNames" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[36]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verifyCount()" name="verifyCount" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="verifyNames(java.lang.String, java.lang.Integer)" name="verifyNames" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anne Marie]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.MethodTest">
        <test-method status="PASS" signature="multipleTestMethods()" name="multipleTestMethods" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="test1(java.lang.String)" name="test1" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Alois]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="test2(java.lang.String)" name="test2" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="test1(java.lang.String)" name="test1" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="test3(java.lang.String)" name="test3" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.BooleanTest">
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.StaticDataProviderSampleTest">
        <test-method status="PASS" signature="verifyStatic(java.lang.String)" name="verifyStatic" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.dataprovider.ConfigurationAndDataProvidersTest">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="verifyNames(java.lang.Object)" name="verifyNames" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="setUpClass()" name="setUpClass" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="setUpTest()" name="setUpTest" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
      </class>
      <class name="test.dataprovider.TestContextTest">
        <test-method status="PASS" signature="verifyTen()" name="verifyTen" duration-ms="18" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="verifySix()" name="verifySix" duration-ms="24" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="verifyFive()" name="verifyFive" duration-ms="18" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
      </class>
      <class name="test.dataprovider.FailingDataProviderTest">
        <test-method status="PASS" signature="failingDataProvider()" name="failingDataProvider" duration-ms="5" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
      </class>
      <class name="test.dataprovider.UnnamedDataProviderTest">
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="doStuff(boolean)" name="doStuff" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
    <test name="Parameters for constructors">
      <class name="test.ParameterConstructorTest">
        <test-method status="PASS" signature="verify()" name="verify" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
      </class>
    </test>
    <test name="Individual method">
      <class name="test.IndividualMethodsTest">
        <test-method status="PASS" signature="testMethod()" name="testMethod" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="2" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
      </class>
    </test>
    <test name="Object factory">
      <class name="test.objectfactory.CustomFactoryTest">
        <test-method status="PASS" signature="setFactoryByAnnotation()" name="setFactoryByAnnotation" duration-ms="18" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="setFactoryOnSuite()" name="setFactoryOnSuite" duration-ms="15" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="factoryReceivesContext()" name="factoryReceivesContext" duration-ms="23" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="setFactoryOnTestNG()" name="setFactoryOnTestNG" duration-ms="16" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="PASS" signature="resetCount()" name="resetCount" is-config="true" duration-ms="1" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
        </test-method>
        <test-method status="FAIL" signature="setInvalidMethodFactoryByAnnotation()" name="setInvalidMethodFactoryByAnnotation" duration-ms="1" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <exception class="org.testng.TestNGException">
            <message>
Return type of public java.lang.Object test.objectfactory.BadMethodFactoryFactory.create() is not IObjectFactory</message>
            <full-stacktrace>org.testng.TestNGException: 
Return type of public java.lang.Object test.objectfactory.BadMethodFactoryFactory.create() is not IObjectFactory
	at org.testng.internal.TestNGClassFinder.&lt;init&gt;(TestNGClassFinder.java:58)
	at org.testng.TestRunner.initMethods(TestRunner.java:265)
	at org.testng.TestRunner.init(TestRunner.java:211)
	at org.testng.TestRunner.init(TestRunner.java:173)
	at org.testng.TestRunner.&lt;init&gt;(TestRunner.java:130)
	at org.testng.SuiteRunner$DefaultTestRunnerFactory.newTestRunner(SuiteRunner.java:444)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:234)
	at org.testng.SuiteRunner.run(SuiteRunner.java:190)
	at org.testng.TestNG.createAndRunSuiteRunners(TestNG.java:989)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:953)
	at org.testng.TestNG.run(TestNG.java:720)
	at test.objectfactory.CustomFactoryTest.setInvalidMethodFactoryByAnnotation(CustomFactoryTest.java:64)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.testng.internal.MethodHelper.invokeMethod(MethodHelper.java:604)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:482)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:749)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.runWorkers(TestRunner.java:678)
	at org.testng.TestRunner.privateRun(TestRunner.java:624)
	at org.testng.TestRunner.run(TestRunner.java:495)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:300)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:295)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:275)
	at org.testng.SuiteRunner.run(SuiteRunner.java:190)
	at org.testng.TestNG.createAndRunSuiteRunners(TestNG.java:989)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:953)
	at org.testng.TestNG.run(TestNG.java:720)
	at org.testng.TestNG.privateMain(TestNG.java:1021)
	at org.testng.TestNG.main(TestNG.java:999)
</full-stacktrace>
          </exception>
        </test-method>
      </class>
    </test>
    <test name="Regression1">
      <class name="test.Test1">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="includedGroups()" name="includedGroups" duration-ms="16" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsWithCycle()" name="groupsOfGroupsWithCycle" duration-ms="14" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="SKIP" signature="regexp()" name="regexp" duration-ms="20" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="excludedGroups()" name="excludedGroups" duration-ms="32" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsSimple()" name="groupsOfGroupsSimple" duration-ms="16" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="SKIP" signature="logger()" name="logger" duration-ms="3" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="groupsOfGroupsWithIndirections()" name="groupsOfGroupsWithIndirections" duration-ms="62" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
      </class>
      <class name="test.parameters.ParameterSample">
        <test-method status="PASS" signature="testSingleString(java.lang.String)" name="testSingleString" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="beforeTest(java.lang.String)" name="beforeTest" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
      <class name="test.expectedexceptions.ExpectedExceptionsTest">
        <test-method status="PASS" signature="expectedExceptions()" name="expectedExceptions" duration-ms="12" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="expectedExceptionsDeprecatedSyntax()" name="expectedExceptionsDeprecatedSyntax" duration-ms="14" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
      </class>
      <class name="test.access.PrivateAccessConfigurationMethods">
        <test-method status="PASS" signature="allAccessModifiersConfiguration()" name="allAccessModifiersConfiguration" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="publicConfBeforeMethod()" name="publicConfBeforeMethod" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="baseProtectedConfBeforeMethod()" name="baseProtectedConfBeforeMethod" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="baseDefaultConfBeforeMethod()" name="baseDefaultConfBeforeMethod" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="privateConfBeforeMethod()" name="privateConfBeforeMethod" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="defaultConfBeforeMethod()" name="defaultConfBeforeMethod" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="protectedConfBeforeMethod()" name="protectedConfBeforeMethod" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
      </class>
      <class name="test.parameters.ParameterTest">
        <test-method status="PASS" signature="stringSingle()" name="stringSingle" duration-ms="7" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
      </class>
      <class name="test.expectedexceptions.WrappedExpectedException">
        <test-method status="PASS" signature="testTimeout()" name="testTimeout" duration-ms="7" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
          <exception class="java.lang.IllegalStateException">
            <message>expected failure</message>
            <full-stacktrace>java.lang.IllegalStateException: expected failure
	at test.expectedexceptions.WrappedExpectedException.testTimeout(WrappedExpectedException.java:11)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:585)
	at org.testng.internal.MethodHelper.invokeMethod(MethodHelper.java:604)
	at org.testng.internal.InvokeMethodRunnable.run(InvokeMethodRunnable.java:36)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269)
	at java.util.concurrent.FutureTask.run(FutureTask.java:123)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)
	at java.lang.Thread.run(Thread.java:613)
</full-stacktrace>
          </exception>
        </test-method>
      </class>
      <class name="test.Test2">
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="1" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="correctSetup()" name="correctSetup" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="partialGroupsMethod()" name="partialGroupsMethod" duration-ms="13" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="setUpWithGroups()" name="setUpWithGroups" duration-ms="2" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="partialGroupsClass()" name="partialGroupsClass" duration-ms="18" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="noGroups()" name="noGroups" duration-ms="27" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="methodSetUp()" name="methodSetUp" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
      </class>
      <class name="test.CtorCalledOnce">
        <test-method status="PASS" signature="testMethod2()" name="testMethod2" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="afterTest()" name="afterTest" is-config="true" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="testMethod3()" name="testMethod3" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
        <test-method status="PASS" signature="testMethod1()" name="testMethod1" duration-ms="0" started-at="2007-04-07T16:43:10Z" finished-at="2007-04-07T16:43:10Z">
        </test-method>
      </class>
    </test>
    <test name="Parameters in init 1">
      <class name="test.configuration.ConfigurationWithParameters">
        <test-method status="PASS" signature="testMethod(java.lang.String)" name="testMethod" duration-ms="0" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[value1]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testInit(java.lang.String)" name="testInit" is-config="true" duration-ms="1" started-at="2007-04-07T16:43:17Z" finished-at="2007-04-07T16:43:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[value1]]>
              </value>
            </param>
          </params>
        </test-method>
      </class>
    </test>
  </suite>
</testng-results>
